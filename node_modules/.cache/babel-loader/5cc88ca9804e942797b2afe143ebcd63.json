{"ast":null,"code":"var _jsxFileName = \"/Users/sarahvandenberghe/School/Devine/20202021/Development/Personal Passion Project/_Personal-Passion-Project/react-three-fiber-master/src/components/scene/Tree.js\";\nimport React, { useRef, useState } from \"react\";\nimport { useSpring, a } from \"react-spring/three\";\nimport { useFrame, useThree } from \"react-three-fiber\";\n\nconst Tree = ({\n  position,\n  color,\n  speed,\n  args\n}) => {\n  const mesh = useRef();\n  const {\n    viewport\n  } = useThree(); // useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n\n  useFrame(() => {\n    const x = mouse.x * viewport.width / 100;\n    const y = mouse.y * viewport.height / 100;\n  });\n  const [expand, setExpand] = useState(false);\n  const props = useSpring({\n    scale: expand ? [1.4, 1.4, 1.4] : [1, 1, 1]\n  });\n  return /*#__PURE__*/React.createElement(a.mesh, {\n    position: position,\n    ref: mesh // onClick={() => setExpand(!expand)}\n    ,\n    scale: props.scale,\n    castShadow: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"coneBufferGeometry\", {\n    attach: \"geometry\",\n    args: args,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"meshStandardMaterial\", {\n    attach: \"material\",\n    color: color,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Tree;","map":{"version":3,"sources":["/Users/sarahvandenberghe/School/Devine/20202021/Development/Personal Passion Project/_Personal-Passion-Project/react-three-fiber-master/src/components/scene/Tree.js"],"names":["React","useRef","useState","useSpring","a","useFrame","useThree","Tree","position","color","speed","args","mesh","viewport","x","mouse","width","y","height","expand","setExpand","props","scale"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,SAASC,SAAT,EAAoBC,CAApB,QAA6B,oBAA7B;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,mBAAnC;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,KAAZ;AAAmBC,EAAAA,KAAnB;AAA0BC,EAAAA;AAA1B,CAAD,KAAsC;AAE/C,QAAMC,IAAI,GAAGX,MAAM,EAAnB;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAeP,QAAQ,EAA7B,CAH+C,CAI/C;;AAEAD,EAAAA,QAAQ,CAAC,MAAM;AACX,UAAMS,CAAC,GAAIC,KAAK,CAACD,CAAN,GAAUD,QAAQ,CAACG,KAApB,GAA6B,GAAvC;AACA,UAAMC,CAAC,GAAIF,KAAK,CAACE,CAAN,GAAUJ,QAAQ,CAACK,MAApB,GAA8B,GAAxC;AACH,GAHO,CAAR;AAMA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBlB,QAAQ,CAAC,KAAD,CAApC;AACA,QAAMmB,KAAK,GAAGlB,SAAS,CAAC;AACpBmB,IAAAA,KAAK,EAAEH,MAAM,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAH,GAAqB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AADd,GAAD,CAAvB;AAIA,sBACI,oBAAC,CAAD,CAAG,IAAH;AACA,IAAA,QAAQ,EAAEX,QADV;AAEA,IAAA,GAAG,EAAEI,IAFL,CAGA;AAHA;AAIA,IAAA,KAAK,EAAES,KAAK,CAACC,KAJb;AAKA,IAAA,UAAU,MALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMI;AAAoB,IAAA,MAAM,EAAC,UAA3B;AAAsC,IAAA,IAAI,EAAEX,IAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,eAOI;AAAsB,IAAA,MAAM,EAAC,UAA7B;AAAwC,IAAA,KAAK,EAAEF,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,CADJ;AAYH,CA7BD;;AA+BA,eAAeF,IAAf","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { useSpring, a } from \"react-spring/three\";\nimport { useFrame, useThree } from \"react-three-fiber\";\n\nconst Tree = ({ position, color, speed, args }) => {\n    \n    const mesh = useRef();\n    const { viewport } = useThree();\n    // useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n\n    useFrame(() => {\n        const x = (mouse.x * viewport.width) / 100;\n        const y = (mouse.y * viewport.height) / 100;\n    });\n\n\n    const [expand, setExpand] = useState(false);\n    const props = useSpring({\n        scale: expand ? [1.4, 1.4, 1.4] : [1, 1, 1],\n    });\n    \n    return (\n        <a.mesh\n        position={position}\n        ref={mesh}\n        // onClick={() => setExpand(!expand)}\n        scale={props.scale}\n        castShadow>\n            <coneBufferGeometry attach='geometry' args={args} />\n            <meshStandardMaterial attach='material' color={color} />\n        </a.mesh>\n    );\n\n}\n\nexport default Tree;"]},"metadata":{},"sourceType":"module"}